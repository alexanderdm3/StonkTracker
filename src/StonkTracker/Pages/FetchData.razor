@page "/fetchdata"
@using Microsoft.Extensions.Configuration
@using Business.Excel
@using StonkTracker.Models
@inject IConfiguration Configuration
@inject NavigationManager NavManager

@if (models == null ? true : !models.Any())
{
    <FileEdit Changed="@OnChanged" Filter=".xlsx" />
}
else
{
    
    <Table Hoverable="true">
        <TableHeader>
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Symbol</TableHeaderCell>
                <TableHeaderCell>Suggestion Time</TableHeaderCell>
                <TableHeaderCell>Buy At</TableHeaderCell>
                <TableHeaderCell>Sell At (Initial)</TableHeaderCell>
                <TableHeaderCell>Sell At (Secondary)</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
             
            @{
                i = 1;
                foreach (var elem in models)
                {
                    var linkstring = $"/overview/{elem.Symbol}";
                    var val = i;
                        <TableRow>
                            <TableRowHeader>@val</TableRowHeader>
                            <TableRowCell><Button Clicked="@(x => Navigate(elem.Symbol))">@elem.Symbol</Button></TableRowCell>
                            <TableRowCell>@elem.SuggestionTime.ToString()</TableRowCell>
                            <TableRowCell>@elem.BuyAt</TableRowCell>
                            <TableRowCell>@elem.SellAtInitial</TableRowCell>
                            <TableRowCell>@elem.SellAtSecondary</TableRowCell>
                        </TableRow>
                i++;
                }
            }


        </TableBody>
    </Table>

}

@code {
    List<SuggestionModel> models = new List<SuggestionModel>();
    int i = 1;
    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {

            models = await ExcelReader.ReadSuggestionsInputFile(e.Files);
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    void OnWritten(FileWrittenEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Position: {e.Position} Data: {Convert.ToBase64String(e.Data)}");
    }

    void OnProgressed(FileProgressedEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Progress: {e.Percentage}");
    }


    void Navigate(string content)
    {
        string routeString = $"/overview/{content}";
        NavManager.NavigateTo(routeString);
    }

}
